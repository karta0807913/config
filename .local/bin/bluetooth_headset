#!/bin/bash

function get_python() {
    if which python3 > /dev/null; then
        if python3 -c "import dbus" 2>&1 > /dev/null; then
            echo "python3"
            return 0
        fi
    fi
    if which python > /dev/null; then
        if python -c "import dbus" 2>&1 > /dev/null; then
            echo "python"
        fi
    fi
    return 0
}

PYTHON="$(get_python)"
if [ PYTHON = "" ]; then
    echo "need python and dbus-python"
    exit 1
fi

function python() {
    $PYTHON "$@";
}


function get_bluez_devices() {
    python -c '
import dbus
system = dbus.SystemBus()
root = system.get_object("org.bluez", "/")
obs = dbus.Interface(root, dbus_interface="org.freedesktop.DBus.ObjectManager")
managed_objects = obs.GetManagedObjects()
for key in managed_objects:
    if key.split("/")[-1].find("dev") != -1:
        obj = managed_objects[key]["org.bluez.Device1"]
        status="Disconnected"
        if obj["Connected"] == 1:
            status="Connected"
        print(status, obj["Address"] , obj["Adapter"], obj["Name"])
'
}

function toggle_bluez_devices() {
    python -c "$(cat <<EOF
import dbus
import os
system = dbus.SystemBus()
root = system.get_object("org.bluez", "$1");
device = dbus.Interface(root, dbus_interface="org.bluez.Device1")
properties = dbus.Interface(root, dbus_interface="org.freedesktop.DBus.Properties")
if properties.Get("org.bluez.Device1", "Connected") == 1:
    os.system('notify-send "ðŸŽ§Bluetooth" "Try to disconnect $2"')
    try:
        device.Disconnect();
        os.system('notify-send "ðŸŽ§Bluetooth" "Disconnect $2 success"')
    except Exception as e:
        print(e)
        os.system('notify-send "ðŸŽ§Bluetooth" "Disconnect $2 failed"')
else:
    os.system('notify-send "ðŸŽ§Bluetooth" "Try to connect $2"')
    try:
        device.Connect();
        os.system('notify-send "ðŸŽ§Bluetooth" "Connect $2 success"')
    except Exception as e:
        print(e)
        os.system('notify-send "ðŸŽ§Bluetooth" "Connect $2 failed"')
EOF
)"
}

index="0"
declare -A devices
options=''
while read Connected Address Adapter Name;
do
    devices["$index $Name $Connected"]="$Adapter/dev_${Address//:/_} $Name"
    options="${options}$index $Name $Connected
"
    index=$((index+1))
done <<<$(get_bluez_devices)

Device=$(printf "$options" | rofi -dmenu -i -no-custom -p "Connect Bluetooth Devices")

if ! [ "$?" = "0" ]; then
    exit 1
fi

toggle_bluez_devices ${devices[$Device]}
