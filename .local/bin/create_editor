#!/bin/bash

USAGE="<usage> $0 [OPTIONS] [DOCKER_OPTS] [--] project1, project2 ...
where OPTIONS
      -x11             : enable the container x11 forwarding
      -t --type string : which editor version tag

where DOCKER_OPTS      : default docker options, ex: --port 80:80
      project          : target project folder"

if which podman > /dev/null 2>/dev/null; then
    CONTAINERD="podman"
elif which docker > /dev/null 2>/dev/null; then
    CONTAINERD="docker"
else
    echo "no container manager found"
fi

X11="OFF"
DOCKER_OPTS=""
IS_OPTIONS=false
IMAGE_NAME="localhost/my_editor"
IMAGE_VERSION="base"
CONTAINER_NAME=""
WORKING_DIR=""
NETWORK_NAME="podman"

function add_folder() {
    if ! readlink -f "$1" >/dev/null 2>/dev/null; then
        echo "no such file or directory $1"
        exit 1
    fi
    REALPATH="$(readlink -f "$1")"
    if [ -z "$CONTAINER_NAME" ]; then
        CONTAINER_NAME="$(basename "${REALPATH}")-develop"
    fi
    DOCKER_OPTS="${DOCKER_OPTS}-v $(readlink -f "$1"):/home/code/$(basename "${REALPATH}") "
    if [ "${WORKING_DIR}" = "" ]; then
        WORKING_DIR="/home/code/$(basename "${REALPATH}")"
    else
        WORKING_DIR="/home/code"
    fi
}

function check_image_exists() {
    ${CONTAINERD} inspect "$1" >/dev/null 2>/dev/null
}

function build_editor_image() {
    name="$1"
    version="$2"
    dockerpath="$HOME/.emacs.d/docker/Dockerfile.$version"
    if [ "$version" = "base" ]; then
        dockerpath="$HOME/.emacs.d/Dockerfile"
    elif ! check_image_exists "${IMAGE_NAME}:base"; then
        build_editor_image "${IMAGE_NAME}" "base";
    fi
    ${CONTAINERD} build -t "$name:$version" -f "$dockerpath" "$HOME/.emacs.d/"
    if [ "$?" != "0" ]; then
        echo "build failed";
        exit 1;
    fi
}

while [ "$#" -ne 0 ];
do
    case "$1" in
        --)
            shift
            break
            ;;
        -h|--help)
            echo "$USAGE"
            exit 1
            ;;
        -t|--type)
            shift
            IMAGE_VERSION="$1"
            shift
            ;;
        --network)
            shift
            NETWORK_NAME="$1"
            shift
            ;;
        -x11)
            if [ "$X11" = "OFF" ]; then
                X11="ON"
                DOCKER_OPTS="${DOCKER_OPTS} -e DISPLAY=$DISPLAY -e XAUTHORITY=/tmp/.Xauthority -v /tmp/.X11-unix:/tmp/.X11-unix:rw -v $XAUTHORITY:/tmp/.Xauthority "
            fi
            shift
            continue
            ;;
        -*)
            if [ "$1" = "--name" ]; then
                CONTAINER_NAME="$2"
                shift
                shift
                continue
            fi
            DOCKER_OPTS="${DOCKER_OPTS}$1 "
            IS_OPTIONS=true
            shift;
            ;;
        *)
            if $IS_OPTIONS; then
                DOCKER_OPTS="${DOCKER_OPTS}$1 "
                IS_OPTIONS=false
            else
                add_folder "$1"
            fi
            shift;
            ;;
    esac
done

case "$IMAGE_VERSION" in
    base)
        ;;
    nodejs|node)
        IMAGE_VERSION="base"
        ;;
    latex)
        IMAGE_VERSION="latex"
        ;;
    golang)
        IMAGE_VERSION="golang"
        ;;
    clang)
        IMAGE_VERSION="clang"
        ;;
    gcc)
        IMAGE_VERSION="gcc"
        ;;
    flutter)
        IMAGE_VERSION="flutter"
        DOCKER_OPTS="${DOCKER_OPTS}-v /dev/kvm:/dev/kvm "
        ;;
    java)
        IMAGE_VERSION="java"
        ;;
    *)
        if ! podman image inspect "${IMAGE_NAME}:${IMAGE_VERSION}" > /dev/null 2>&1; then
            echo "${IMAGE_NAME}:${IMAGE_VERSION} not found"
            exit 1
        fi
esac

if ! check_image_exists "$IMAGE_NAME:$IMAGE_VERSION"; then
    build_editor_image "$IMAGE_NAME" "$IMAGE_VERSION"
fi

for file in "$@";
do
    add_folder "$file"
done

if ! [ "${WORKING_DIR}" = "" ]; then
    DOCKER_OPTS="${DOCKER_OPTS} -w ${WORKING_DIR}"
fi

# if ssh-agent exists
if [ -S ~/.local/ssh-agent ]; then
    DOCKER_OPTS="${DOCKER_OPTS} -v ${HOME}/.local/ssh-agent:/tmp/ssh/ssh-agent"
    DOCKER_OPTS="${DOCKER_OPTS} -e SSH_AUTH_SOCK=/tmp/ssh/ssh-agent"
fi

# if tabnine exists
if [ -d ~/.config/TabNine ]; then
    DOCKER_OPTS="${DOCKER_OPTS} -v ${HOME}/.config/TabNine:/home/code/.config/TabNine "
fi
# --security-opt=seccomp=unconfined option for allow running the debug tools (like ptrace)
DOCKER_OPTS="${DOCKER_OPTS} --security-opt=seccomp=unconfined "

case "${CONTAINERD}" in
    docker)
        if docker run -it ${DOCKER_OPTS} -d -u "$(id -u):$(id -g)" --network="${NETWORK_NAME}" --name "${CONTAINER_NAME}" "${IMAGE_NAME}:${IMAGE_VERSION}"; then
            // setup user and group name.
            docker exec -u root "${CONTAINER_NAME}" groupadd --gid "$(id -g)" "$(getent group $(id -g) | cut -d: -f1)"
            docker exec -u root "${CONTAINER_NAME}" useradd --uid $UID --gid "$(id -g)" "$(whoami)"
            docker exec -u root "${CONTAINER_NAME}" bash -c "echo '$(whoami) ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers"

            // setup the correct access right.
            docker exec -u root "${CONTAINER_NAME}" sh -c "chown -R \"$(id -u):$(id -g)\" /home/code/*; find /go -maxdepth 4 | xargs -i chown \"$(id -u):$(id -g)\" {}"
            if [ -f ~/.gitconfig ]; then
                cat ~/.gitconfig | docker exec -i "${CONTAINER_NAME}" sh -c 'cat > ~/.gitconfig' >/dev/null
            fi
        fi
        # clear
        docker attach "${CONTAINER_NAME}"
        ;;
    podman)
        if podman run -i -d -t ${DOCKER_OPTS} --network="${NETWORK_NAME}" --name "${CONTAINER_NAME}" "${IMAGE_NAME}:${IMAGE_VERSION}"; then
            if [ -f ~/.gitconfig ]; then
                cat ~/.gitconfig | podman exec -i "${CONTAINER_NAME}" sh -c 'cat > ~/.gitconfig' >/dev/null
            fi
        fi
        podman attach "${CONTAINER_NAME}"
        ;;
esac
